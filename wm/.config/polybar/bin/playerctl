#!/usr/bin/env -S python
import dbus
import signal
import datetime
import time
from unicodedata import east_asian_width

class NowPlaying():
    font_index = 1 # (int) : Font index of polybar. this value should be 1 more than the font value specified in polybar config.
    message_display_len = 60 # (int) : Length of media info string. If length of string exceedes this value, the text will scroll. Default value is 20
    update_delay = 0.3 # (float) : Update speed of the text in seconds.
    display_player_prefix = {
        # dict of char icons to display as prefix.
        "default":  '',
        "firefox":  '',
        "mpd": '%{T4} %{T-}',
        "playerctld": '%{T4} %{T-}',
        "spotify":  '',
    }
    # (list) : list of metadata fields based on mpris sepecification.
    # For more details/ field names, refer [mpris sepecification](https://www.freedesktop.org/wiki/Specifications/mpris-spec/metadata/)
    metadata_fields = [
        "xesam:title",
        "xesam:artist"
    ]
    metadata_separator = "-" # (char) : separator for metadata fields
    hide_output = True # (bool) : Hide text when no player is available? True disables the output for no players.

    def __init__(self):
        self.display_prefix = ""
        self.players = []
        self.player_names = []
        self.current_player = 0
        self.message = ""
        self.last_player_name = None
        self.session_bus = dbus.SessionBus()
        self.display_text = ""
        self.display_suffix = ""
        self.paused = None

    def get_name(self, player_name) -> str:
        if player_name not in self.player_names:
            return ""
        name = ".".join(player_name.split(".")[3:])
        return name

    def get_name_by_index(self, index):
        if index >= len(self.player_names):
            return ""
        return self.get_name(self.player_names[index])

    def get_status(self, player):
        status = ""
        try:
            status = player.Get(
                'org.mpris.MediaPlayer2.Player',
                'PlaybackStatus',
                dbus_interface='org.freedesktop.DBus.Properties'
            )
        except Exception as _:
            pass
        return status

    def get_position(self, player):
        status = ""
        try:
            status = player.Get(
                'org.mpris.MediaPlayer2.Player',
                'Position',
                dbus_interface='org.freedesktop.DBus.Properties'
            )
        except Exception as _:
            pass
        return status

    def get_metadata(self, player):
        metadata = {}
        try:
            metadata = player.Get(
                'org.mpris.MediaPlayer2.Player',
                'Metadata',
                dbus_interface='org.freedesktop.DBus.Properties'
            )
        except Exception as _:
            pass
        return metadata

    def update_prefix_suffix(self, player_name="", status=""):
        global display_suffix, paused
        suffix = ""
        if status == "Playing":
            paused = False
        else:
            paused = True
        self.display_suffix = suffix
        for key in NowPlaying.display_player_prefix.keys():
            if key in player_name:
                self.display_prefix = NowPlaying.display_player_prefix[key]
                break
        else:
            self.display_prefix = NowPlaying.display_player_prefix["default"]

    def update_players(self):
        self.player_names = [
            service for service in getattr(self.session_bus, 'list_names')()
            if service.startswith('org.mpris.MediaPlayer2.')
        ]
        self.players = [
            self.session_bus.get_object(
                service,
                '/org/mpris/MediaPlayer2'
            )
            for service in self.player_names
        ]
        if self.last_player_name != self.get_name(self.current_player):
            for index, player in enumerate(self.player_names):
                if self.get_name(player) == self.last_player_name:
                    self.current_player = index

    def handle_event(self, _, __):
        self.update_players()
        if len(self.players) == 0:
            return
        self.current_player += 1
        self.current_player %= len(self.players)
        self.last_player_name = self.get_name_by_index(self.current_player)

    def update_message(self):
        if len(self.players) == 0:
            tmp_message = "No player available"
            self.update_prefix_suffix()
        else:
            name = self.get_name_by_index(self.current_player)
            status = self.get_status(self.players[self.current_player])
            metadata_obj = self.get_metadata(self.players[self.current_player])
            metadata_string_list = []
            for field in NowPlaying.metadata_fields:
                result = metadata_obj.get(field)
                if type(result) == dbus.Array:
                    if result and result[0] is not None:
                        result = result[0]
                if not result:
                    result = ""
                metadata_string_list.insert(0, str(result))
            metadata_string = (" " + NowPlaying.metadata_separator + " ").join(metadata_string_list)
            if self.visual_len(metadata_string) > NowPlaying.message_display_len:
                metadata_string = " " + metadata_string
            self.update_prefix_suffix(name, status)
            tmp_message = ""
            if metadata_string:
                tmp_message += str(metadata_string)
            self.last_player_name = name
        if self.message != tmp_message:
            self.message = tmp_message
            self.display_text = self.message

    def scroll(self):
        if not self.paused:
            if self.visual_len(self.display_text) > NowPlaying.message_display_len:
                self.display_text = self.display_text[1:] + self.display_text[0]
            elif self.visual_len(self.display_text) < NowPlaying.message_display_len:
                self.display_text += " "*(NowPlaying.message_display_len - len(self.display_text))

    def visual_len(self, text):
        visual_length = 0
        for ch in text:
            width = east_asian_width(ch)
            if width == 'W' or width == 'F':
                visual_length += 2
            visual_length += 1
        return visual_length

    def make_visual_len(self, text, visual_desired_length):
        visual_length = 0
        altered_text = ''
        for char in text:
            if visual_length < visual_desired_length:
                width = east_asian_width(char)
                if width == 'W' or width == 'F':
                    visual_length += 2
                else:
                    visual_length += 1
                altered_text += char
            else:
                break
        if visual_length == visual_desired_length + 1:
            altered_text = altered_text[:-1] + ' '
        elif visual_length < visual_desired_length:
            altered_text += ' ' * (visual_desired_length - visual_length)
        return altered_text

    def position(self) -> str:
        position = self.get_position(
            self.players[self.current_player]
        )
        if not position:
            return ""
        seconds = float(position) / 1000000
        if seconds is not None and seconds:
            delta = str(datetime.timedelta(seconds=seconds))
            if delta[0:2] == '0:':
                return delta[3:]
            else:
                return delta
        return ""

    def print_text(self):
        global display_text, players, display_suffix
        if NowPlaying.hide_output and len(self.players) == 0:
            print("", flush = True)
            return
        self.scroll()
        metadata_info = self.make_visual_len(
            self.display_text, 
            NowPlaying.message_display_len
        ).rstrip()
        set_font = f"%{{T{NowPlaying.font_index}}}"
        print(
            self.display_prefix
            + " "
            + set_font
            + metadata_info
            + " " + self.position() +
            "%{T-}" + self.display_suffix
            , flush=True
        )

if __name__ == '__main__':
    n = NowPlaying()
    signal.signal(
        signal.SIGUSR1,
        n.handle_event
    )
    n.update_players()
    while True:
        time.sleep(NowPlaying.update_delay)
        n.update_players()
        n.update_message()
        n.print_text()
