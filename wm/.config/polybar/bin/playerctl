#!/usr/bin/env -S python

""" Playerctl printing daemon.

Usage:
    ./playerctl

Suppoused to be used inside polybar for now.
Config example:

[module/playerctl]
type=custom/script
exec=$XDG_CONFIG_HOME/polybar/bin/playerctl
click-right="kill -USR1 $(pgrep --oldest --parent %pid%)"
tail=true

Created by :: d093w1z (https://github.com/d093w1z/polybar-now-playing)
Extended by :: Neg <serg.zorg@gmail.com>
github :: https://github.com/neg-serg?tab=repositories
year :: 2024
"""

import dbus
import signal
import datetime
import time

class NowPlaying():
    font_index = 1 # (int) : Font index of polybar. this value should be 1 more than the font value specified in polybar config.
    delay = 0.3 # (float) : Update speed of the text in seconds.
    display_player_prefix = {
        # dict of char icons to display as prefix.
        "default":  '',
        "firefox":  '',
        "mpd": '%{T4} %{T-}',
        "spotify":  '',
    }
    # (list) : list of metadata fields based on mpris sepecification.
    # For more details/ field names, refer [mpris sepecification](https://www.freedesktop.org/wiki/Specifications/mpris-spec/metadata/)
    metadata_fields = [
        "xesam:title",
        "xesam:artist"
    ]
    metadata_separator = "%{F#657491}―%{F}" # (str) : separator for metadata fields
    hide_output = True # (bool) : Hide text when no player is available? True disables the output for no players.

    def __init__(self):
        self.display_prefix = ""
        self.players = []
        self.player_names = []
        self.current_player = 0
        self.message = ""
        self.last_player_name = None
        self.session_bus = dbus.SessionBus()
        self.display_text = ""
        self.paused = None

    def make_output(self):
        self.update_players()
        self.update_message()
        self.print_text()

    @staticmethod
    def pos_delim() -> str:
        return NowPlaying.colorize('/')

    @staticmethod
    def colorize(s, color="#395573") -> str:
        return f"%{{F{color}}}{s}%{{F-}}"

    @staticmethod
    def smallfont(s) -> str:
        return f"%{{T5}}{s}%{{T-}}"

    def get_name(self, player_name) -> str:
        if player_name not in self.player_names:
            return ""
        name = ".".join(player_name.split(".")[3:])
        return name

    def get_name_by_index(self, index):
        if index >= len(self.player_names):
            return ""
        return self.get_name(self.player_names[index])

    def prop(self, ret, player, prop_name):
        if player is None:
            player = self.players[self.current_player]
        try:
            ret = player.Get(
                'org.mpris.MediaPlayer2.Player',
                prop_name,
                dbus_interface='org.freedesktop.DBus.Properties'
            )
        except Exception as _:
            pass
        return ret

    def get_status(self, player=None):
        return self.prop("", player, 'PlaybackStatus')

    def get_position(self, player):
        return self.prop("", player, 'Position')

    def metadata(self, player):
        return self.prop({}, player, 'Metadata')

    def update_prefix(self, player_name="", status=""):
        if status == "Paused":
            self.display_prefix = '·'
            return
        if status == "Stopped":
            self.display_prefix = ''
            return
        for key in NowPlaying.display_player_prefix.keys():
            if key in player_name:
                self.display_prefix = NowPlaying.display_player_prefix[key]
                break
        else:
            self.display_prefix = NowPlaying.display_player_prefix["default"]

    def update_players(self):
        self.player_names = [
            service for service in getattr(self.session_bus, 'list_names')()
            if service.startswith('org.mpris.MediaPlayer2.')
        ]
        self.players = [
            self.session_bus.get_object(service, '/org/mpris/MediaPlayer2')
            for service in self.player_names
        ]
        if self.last_player_name != self.get_name(self.current_player):
            for index, player in enumerate(self.player_names):
                if self.get_name(player) == self.last_player_name:
                    self.current_player = index

    def next_player(self, _, __):
        self.update_players()
        if len(self.players) == 0:
            return
        self.current_player += 1
        self.current_player %= len(self.players)
        self.last_player_name = self.get_name_by_index(self.current_player)

    @staticmethod
    def extract_field(metadata_obj, field):
        result = metadata_obj.get(field)
        if type(result) == dbus.Array:
            if result and result[0] is not None:
                result = result[0]
        if not result:
            result = ""
        return result

    def get_meta(self):
        return self.metadata(self.players[self.current_player])

    def update_message(self):
        tmp = ""
        if not len(self.players):
            self.message = "No player available"
            self.update_prefix()
        else:
            status = self.get_status()
            if status == 'Stopped':
                self.display_text = ''
                self.message = ''
                self.update_prefix(status=status)
                return
            name = self.get_name_by_index(self.current_player)
            metadata = []
            for field in NowPlaying.metadata_fields:
                result = NowPlaying.extract_field(self.get_meta(), field)
                metadata.insert(0, str(result))
            metadata_string = (f' {NowPlaying.metadata_separator} ').join(metadata)
            self.update_prefix(name, status)
            if metadata_string:
                tmp += str(metadata_string)
            self.last_player_name = name
        if self.message != tmp:
            self.message = tmp
            self.display_text = self.message

    @staticmethod
    def time_extract(t) -> str:
        ret = ''
        seconds = int(float(t) / 1000000)
        if seconds is not None and seconds:
            ret = str(datetime.timedelta(seconds=seconds))
            if ret.startswith('0:'):
                ret = ret[2:]
            if ret.startswith('0'):
                ret = ret[1:]
        return ret

    def position(self) -> str:
        ret = '0:00'
        if self.get_status() == 'Stopped':
            return ''
        pos = self.get_position(
            self.players[self.current_player]
        )
        if pos:
            ret = NowPlaying.time_extract(pos)
        end = NowPlaying.extract_field(self.get_meta(), 'mpris:length')
        if end is not None and end:
            end = NowPlaying.time_extract(end)
            ret = f'{ret}{NowPlaying.pos_delim()}{end}'
        return ret

    def print_text(self):
        if NowPlaying.hide_output and not len(self.players):
            print("", flush=True)
            return
        metadata_info = self.display_text.rstrip()
        set_font = f"%{{T{NowPlaying.font_index}}}"
        pref = NowPlaying.colorize(self.display_prefix)
        pos = NowPlaying.smallfont(self.position())
        print(
            f'{pref}%{{O5}}{set_font}{metadata_info} {pos}'
            , flush=True
        )

if __name__ == '__main__':
    n = NowPlaying()
    signal.signal(signal.SIGUSR1, n.next_player)
    n.update_players()
    while True:
        time.sleep(NowPlaying.delay)
        n.make_output()
