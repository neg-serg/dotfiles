#!/usr/bin/env zsh
CLEAR_PLAYLIST=0
MODE=""
CACHE_DIR="${XDG_CACHE_HOME:-$HOME/.cache}/mpd_manager"
CACHE_TTL=86400 # 24 hours
DEFAULT_MODE="artist-album"
NEW_DIR="new"

# Mode definitions
typeset -A MODE_INFO=(
    artist       "üé§ ARTIST SELECTION"
    directory    "üìÅ DIRECTORY SELECTION"
    new          "üÜï NEW GROUP SELECTION ($NEW_DIR/)"
    artist-album "üé§üíø ARTIST-ALBUM-YEAR SELECTION"
)

typeset -A NEXT_MODE=(
    artist directory
    directory artist-album
    artist-album new
    new artist
)

# Parse arguments
while (( $# )); do
    case $1 in
        -c|--clear) CLEAR_PLAYLIST=1 ;;
        -a|--artist) MODE=artist ;;
        -d|--directory) MODE=directory ;;
        -b|--artist-album) MODE=artist-album ;;
        -n|--new) MODE=new ;;
        -v|--verbose) VERBOSE=1 ;;
        --no-cache) NO_CACHE=1 ;;
        *)
            print "Usage: ${0:t} [-c] [-a|-d|-b|-n] [--no-cache]"
            print "Options:"
            for k v in "(-c --clear)"        "Clear playlist before adding" \
                      "(-a --artist)"       "Select by artists" \
                      "(-d --directory)"    "Select by directories" \
                      "(-b --artist-album)" "Select by artist-album pairs" \
                      "(-n --new)"          "Select from '$NEW_DIR' directory" \
                      "(--no-cache)"        "Disable caching"
            print "  $k $v"
            exit 1
            ;;
    esac
    shift
done

# Set default mode if not specified
: ${MODE:=$DEFAULT_MODE}
mkdir -p "$CACHE_DIR"

get_mpd_db_path() {
    db_path=$XDG_CONFIG_HOME/mpd/tag_cache
    [[ -f $db_path ]] && { echo "$db_path"; return }
    return 1
}

# Cache management
manage_cache() {
    local mpd_db=$(get_mpd_db_path)
    [[ -z $NO_CACHE && -f $mpd_db ]] || return
    for cache_file in "$CACHE_DIR"/*.cache(N); do
        [[ -f $cache_file && $mpd_db -nt $cache_file ]] && {
            rm -f "$cache_file"
            echo "‚ôªÔ∏è  Cache cleared due to updated MPD database"
        }
    done
}

manage_cache
# Get data with caching
get_data() {
    local mode=$1 cache_file="$CACHE_DIR/$mode.cache"
    # Use cache if valid
    if [[ -z $NO_CACHE && -f $cache_file ]]; then
        local now=$(date +%s)
        local mtime=$(stat -c %Y "$cache_file")
        (( now - mtime < CACHE_TTL )) && { cat "$cache_file"; return }
    fi

    # Generate fresh data
    case $mode in
        artist) mpc list artist | LC_ALL=C sort -f | uniq | tee "$cache_file" ;;
        directory|new)
            local base=""
            [[ $mode == new ]] && base="$NEW_DIR/"
            mpc listall | awk -F/ -v base="$base" -v mode="$mode" '{
                path = ""
                for (i=1; i<NF; i++) {
                    path = path (i>1 ? "/" : "") $i
                    if ((!base || path ~ "^" base) &&
                        ((mode == "new" && i == 2) || (mode == "directory" && i == NF-1))) {
                        print path
                    }
                }
            }' | LC_ALL=C sort -f | uniq | tee "$cache_file" ;;
        artist-album)
            mpc list album | while read -r album; do
                mpc list artist album "$album" | while read -r artist; do
                    year=$(mpc list date album "$album" artist "$artist" 2>/dev/null |
                           grep -oE '\b[0-9]{4}\b' | head -n1)
                    printf "%s - %s%s\n" "$artist" "$album" ${year:+ " [$year]"}
                done
            done | LC_ALL=C sort -f | uniq | tee "$cache_file" ;;
    esac
}

data=$(get_data "$MODE") || { print "Error: No data available for mode: $MODE" >&2; exit 1; }

selected=$(<<< "$data" fzf --multi \
    --prompt="Select ($MODE): " \
    --header="$MODE_INFO[$MODE]
[Enter] Add | [Esc] Cancel
[Ctrl+e] Switch mode | [Ctrl+r] Refresh | [Ctrl+l] Clear cache" \
    --bind "ctrl-e:execute(echo switch > /tmp/mpd_switch)+abort" \
    --bind "ctrl-r:reload($0 --$MODE)" \
    --bind "ctrl-l:execute(rm -f $CACHE_DIR/*.cache)+reload($0 --$MODE)" \
    --height=60% --reverse --color='header:italic,fg:cyan')

# Handle mode switching
[[ -f /tmp/mpd_switch ]] && {
    rm -f /tmp/mpd_switch
    new_mode=$NEXT_MODE[$MODE]
    exec "$0" "--$new_mode" "${CLEAR_PLAYLIST:+-c}" "$@"
}

# Process selected items
[[ -z $selected ]] && exit 0
(( CLEAR_PLAYLIST )) && mpc clear >/dev/null

total_added=0
start_time=$EPOCHSECONDS

while IFS= read -r item; do
    before_count=$(mpc playlist | wc -l)

    case $MODE in
        artist) mpc findadd artist "$item" >/dev/null; msg="üé§ Adding $item" ;;
        directory|new)
            mpc add "$item" >/dev/null
            if [[ $MODE == new ]]; then
                msg="üÜï Adding new group: ${item#$NEW_DIR/}"
            else
                msg="üìÅ Adding $item"
            fi ;;
        artist-album)
            if [[ $item =~ "(.*) - (.*)( \\[[0-9]{4}\\])?" ]]; then
                artist=$match[1]
                album=${match[2]% \[*\]}
                mpc findadd artist "$artist" album "$album" >/dev/null
                msg="üé§üíø Adding $artist - $album"
            fi ;;
    esac
    count=$(( $(mpc playlist | wc -l) - before_count ))
    (( total_added += count ))
    print "$msg... $count tracks"
done <<< "$selected"

# Start playback and show summary
mpc play >/dev/null
duration=$((EPOCHSECONDS - start_time))

print "\nüéµ Updated in $duration seconds"
print "üöÄ Tracks added: $total_added"
print "üìã Total in playlist: $(mpc playlist | wc -l) tracks"
