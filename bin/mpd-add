#!/usr/bin/env zsh
# MPD Playlist Manager with Artist-Album pairing and Year
# Requirements: fzf, mpc, awk

CLEAR_PLAYLIST=0
MODE=""
CACHE_DIR="${XDG_CACHE_HOME:-$HOME/.cache}/mpd_manager"
CACHE_TTL=86400 # 24 hours in seconds
LAST_SELECTION=""
DEFAULT_MODE="artist-album"

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case "$1" in
        -c|--clear) CLEAR_PLAYLIST=1; shift ;;
        -a|--artist) MODE="artist"; shift ;;
        -d|--directory) MODE="directory"; shift ;;
        -b|--album-artist) MODE="artist-album"; shift ;;
        -v|--verbose) VERBOSE=1; shift ;;
        --no-cache) NO_CACHE=1; shift ;;
        *)
            print "Usage: $(basename "$0") [-c] [-a|-d|-b] [--no-cache]"
            print "  -c, --clear        Clear playlist before adding"
            print "  -a, --artist       Select by artists"
            print "  -d, --directory    Select by directories"
            print "  -b, --album-artist Select by artist-album pairs"
            print "  --no-cache         Disable caching"
            exit 1
            ;;
    esac
done

# Create cache directory if needed
mkdir -p "$CACHE_DIR"

# Automatic cache update when MPD database changes
mpd_db_file="${MPD_DB_FILE:-$HOME/.config/mpd/database}"
if [[ -z "$NO_CACHE" && -f "$mpd_db_file" ]]; then
    # Check if MPD database is newer than cache
    for cache_file in "$CACHE_DIR"/*.cache; do
        if [[ -f "$cache_file" && "$mpd_db_file" -nt "$cache_file" ]]; then
            rm -f "$cache_file"
            if [[ -n $VERBOSE ]]; then
                echo "‚ôªÔ∏è  Cache cleared due to updated MPD database"
            fi
        fi
    done
fi

# Interactive mode selection if not specified
if [[ -z "$MODE" ]]; then
    # Default to artist-album mode if no selection
    MODE=$DEFAULT_MODE
fi

# Function to get data with caching
get_data() {
    local mode=$1
    local cache_file="$CACHE_DIR/${mode}.cache"

    # Use cache if valid
    if [[ -z "$NO_CACHE" && -f "$cache_file" ]]; then
        local now=$(date +%s)
        local mtime=$(stat -c %Y "$cache_file")

        if (( now - mtime < CACHE_TTL )); then
            cat "$cache_file"
            return 0
        fi
    fi

    # Generate fresh data
    case $mode in
        artist)
            # Case-insensitive sorting with special characters handling
            mpc list artist | LC_ALL=C sort -f | uniq | tee "$cache_file"
            ;;
        directory)
            # Natural sorting for directories
            mpc listall | awk -F/ '{
                path = ""
                for (i=1; i<NF; i++) {
                    path = (path ? path "/" : "") $i
                    # Print only leaf directories
                    if (i == NF-1) print path
                }
            }' | LC_ALL=C sort -f | uniq | tee "$cache_file"
            ;;
        artist-album)
            # Generate unique artist-album pairs with year
            if [[ -n $VERBOSE ]]; then
                echo "üîç Generating artist-album-year pairs..."
            fi

            # Efficient method to get all artist-album-year pairs
            mpc list album | while read -r album; do
                artist=$(mpc list artist album "$album" | head -n1)
                if [[ -n "$artist" ]]; then
                    # Get release year (first 4-digit year found)
                    year=$(mpc list date album "$album" artist "$artist" 2>/dev/null | grep -oE '\b[0-9]{4}\b' | head -n1)
                    [[ -n "$year" ]] && year_str=" [$year]" || year_str=""
                    print "$artist - $album$year_str"
                fi
            done | LC_ALL=C sort -f | uniq | tee "$cache_file"
            ;;
    esac
}

# Get data for selected mode
data=$(get_data "$MODE")
if [[ -z "$data" ]]; then
    print "Error: No data available for mode: $MODE"
    exit 1
fi

case $MODE in
    artist) header="üé§ ARTIST SELECTION" ;;
    directory) header="üìÅ DIRECTORY SELECTION" ;;
    artist-album) header="üé§üíø ARTIST-ALBUM-YEAR SELECTION" ;;
    *) print "Error: Invalid mode '$MODE'"; exit 1 ;;
esac

# Interactive selection with fzf
selected=$(echo "$data" | fzf \
    --multi \
    --prompt="Select ($MODE): " \
    --header="$header
[Enter] Add | [Esc] Cancel
[Ctrl+Shift+M] Switch mode | [Ctrl+R] Refresh | [F5] Clear cache" \
    --bind "ctrl-M:accept+execute(echo switch > /tmp/mpd_switch)+abort" \
    --bind "ctrl-r:reload($0 --$MODE)" \
    --bind "f5:execute(rm -f $CACHE_DIR/*.cache)+reload($0 --$MODE)" \
    --ansi \
    --height=40% \
    --reverse \
    --color='header:italic,fg:cyan' \
    --preview-window='right:50%:wrap' \
    --preview="echo -e '\033[1mPreview:\033[0m\n';
               if [ '$MODE' = 'artist' ]; then
                   mpc list artist \"{}\" | head -n 20;
               elif [ '$MODE' = 'directory' ]; then
                   mpc ls \"{}\" | head -n 20;
               elif [ '$MODE' = 'artist-album' ]; then
                   # Extract clean artist and album without year
                   item=\"{}\"
                   clean_item=\"\${item% [*}\"  # Remove year part if exists
                   artist=\"\${clean_item%% - *}\"
                   album=\"\${clean_item#* - }\"
                   mpc find artist \"\$artist\" album \"\$album\" | head -n 20;
               fi")

# Handle mode switching
if [[ -f /tmp/mpd_switch ]]; then
    rm -f /tmp/mpd_switch
    if [[ $MODE == "artist" ]]; then
        new_mode="directory"
    elif [[ $MODE == "directory" ]]; then
        new_mode="artist-album"
    else
        new_mode="artist"
    fi

    # Restart with new mode
    exec "$0" "--$new_mode" "${CLEAR_PLAYLIST:+-c}" "$@"
fi

# Process selected items
if [[ -n "$selected" ]]; then
    # Clear playlist if requested
    if [[ $CLEAR_PLAYLIST -eq 1 ]]; then
        mpc clear >/dev/null
    fi

    total_added=0
    start_time=$EPOCHSECONDS

    # Add selected items to playlist
    while IFS= read -r item; do
        if [[ -n "$item" ]]; then
            # Get current playlist count
            before_count=$(mpc playlist | wc -l)

            # Handle different modes
            case $MODE in
                artist)
                    mpc findadd artist "$item" >/dev/null
                    after_count=$(mpc playlist | wc -l)
                    count=$((after_count - before_count))
                    echo "üé§ Adding $item... $count tracks"
                    total_added=$((total_added + count))
                    ;;

                directory)
                    mpc add "$item" >/dev/null
                    after_count=$(mpc playlist | wc -l)
                    count=$((after_count - before_count))
                    echo "üìÅ Adding $item... $count tracks"
                    total_added=$((total_added + count))
                    ;;

                artist-album)
                    # Extract clean artist and album without year
                    clean_item="${item% [*}"  # Remove year part if exists
                    artist="${clean_item%% - *}"
                    album="${clean_item#* - }"

                    # Get release year for display
                    year=$(echo "$item" | grep -oE '\[[0-9]{4}\]$' | tr -d '[]')

                    # Add items
                    mpc findadd artist "$artist" album "$album" >/dev/null

                    # Calculate added tracks
                    after_count=$(mpc playlist | wc -l)
                    count=$((after_count - before_count))

                    # Print with year if available
                    if [[ -n "$year" ]]; then
                        echo "üé§üíø Adding $artist - $album [$year]... $count tracks"
                    else
                        echo "üé§üíø Adding $artist - $album... $count tracks"
                    fi
                    total_added=$((total_added + count))
                    ;;
            esac
        fi
    done <<< "$selected"

    # Start playback and show status
    mpc play >/dev/null
    end_time=$EPOCHSECONDS
    duration=$((end_time - start_time))
    playlist_count=$(mpc playlist | wc -l)

    # Simple summary output
    echo ""
    echo "üéµ Updated in $duration seconds"
    echo "üöÄ Tracks added: $total_added"
    echo "üìã Total in playlist: $playlist_count tracks"
fi
